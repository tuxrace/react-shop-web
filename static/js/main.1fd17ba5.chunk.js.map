{"version":3,"sources":["constants.ts","class/Product.ts","components/ProductTile/ProductTile.tsx","components/Cart/Cart.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","Product","image","price","currency","name","this","ProductTile","props","data","handleClick","Grid","className","src","getImage","alt","getName","container","Typography","variant","toUpperCase","getCurrency","parseFloat","getPrice","toFixed","data-testid","onClick","Cart","cartItems","handleRemove","useState","itemTotal","setItemTotal","handleQuantityChange","e","target","id","value","itemInfo","find","item","getItem","newItemTotal","result","String","getItemTotal","justify","direction","spacing","Table","TableHead","TableRow","TableCell","TableBody","map","idx","key","component","scope","console","log","onHandleRemove","alignItems","height","renderProduct","type","onChange","colSpan","Object","keys","reduce","acc","cur","Main","setData","setCartItems","useEffect","a","axios","get","then","plainToClass","response","getData","filter","length","slice","mainProduct","restOfProducts","xs","Divider","newCartItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1fd17ba5.chunk.js","sourcesContent":["const API_URL = 'https://s3.irvinsaltedegg.com.s3-ap-southeast-1.amazonaws.com/engineering-test/products.json';\nconst PRODUCTS_PER_PAGE = 5;\nexport { API_URL, PRODUCTS_PER_PAGE };","export class Product {\n    public image!: string;\n    public price!: string;\n    public currency!: string;\n    public name!: string;\n    \n    getImage() {\n        return this.image;\n    }\n\n    getPrice() {\n        return this.price;\n    }\n\n    getCurrency() {\n        return this.currency;\n    }\n\n    getName() {\n        return this.name;\n    }\n}","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport { Product } from '../../class/Product';\nimport './ProductTile.scss';\nimport { Typography } from '@material-ui/core';\n\ninterface Props {\n    data: Product, \n    handleClick: (data: Product) => void\n}\n\nconst ProductTile: React.FC<Props> = (props) => {\n    const { data, handleClick } = props;\n    const onHandleClick = () => {\n        handleClick(data);\n    }\n    return (\n        <Grid className=\"productTileRoot\">\n            <img src={ data.getImage()} alt={data.getName()}/>\n            <Grid container className=\"productTileBottom\">\n                <div className=\"productTileNamePrice\">\n                    <Typography variant=\"body1\" className=\"productName\"><strong>{data.getName().toUpperCase()}</strong></Typography>\n                    <Typography variant=\"body1\">{`${data.getCurrency()} ${parseFloat(data.getPrice()).toFixed(2)}`}</Typography>\n                </div>\n                <button data-testid={`button-addCart-${data.getName()}`} onClick={onHandleClick} className=\"buttonAddCart\"> ADD TO CART </button>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default ProductTile;","import React, { useState } from 'react'\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody, Typography} from '@material-ui/core';\nimport { Product } from '../../class/Product';\n\nimport './Cart.scss'\n\ninterface Props {\n    cartItems: Product[];\n    handleRemove: any;\n}\n\ninterface ItemTotal {\n    [index: string]: string;\n}\n\nconst Cart: React.FC<Props> = (props) => {\n    const { cartItems, handleRemove } = props;\n    const [itemTotal, setItemTotal] = useState<ItemTotal>({});\n\n    const getItem = (id: string) => {\n        const item = cartItems.find(item => item.getName() === id);\n        return item;\n    }\n\n    const getItemTotal = (value: string, price: string) => {\n        const result = parseFloat(value) * parseFloat(price);\n        return String(result)\n    }\n\n    const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { id, value } = e.target\n        const itemInfo = getItem(id);\n\n        if(itemInfo){\n            const newItemTotal = {\n                ...itemTotal,\n                [id]: getItemTotal(value, itemInfo.getPrice())\n            };\n            setItemTotal(newItemTotal);\n        }\n    }\n\n    const getMainTotal = () => {\n        return Object.keys(itemTotal).reduce((acc: string, cur: string) => {\n            acc = String(parseFloat(itemTotal[cur]) + parseFloat(acc))\n            return acc\n        }, \"0\");\n    }\n\n    const onHandleRemove = (id: string) => {\n        const newItemTotal = itemTotal;\n        delete newItemTotal[id];\n        console.log(newItemTotal)\n        setItemTotal(newItemTotal);\n        handleRemove(id);\n    }\n\n    const renderProduct = (item: Product) => {\n        return (\n            <Grid container alignItems=\"center\" spacing={2}>\n                <Grid item>\n                    <img height={40} src={item.getImage()} alt={item.getName()} />\n                </Grid>\n                <Grid item>\n                    <strong>{item.getName()}</strong>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return (\n        <div className=\"cartRoot\">\n            <Grid container className=\"\" justify=\"center\" direction=\"column\" spacing={3}>\n                <Grid item> SHOPPING CART</Grid>\n                <Grid item> \n                        <Table className=\"tableCart\">\n                            <TableHead>\n                                <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Price</TableCell>\n                                <TableCell>Quantity</TableCell>\n                                <TableCell>Total</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                            {cartItems.map((item, idx) => (\n                                <TableRow key={item.getName()}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <button data-testid={`button-${idx}`} onClick={() => onHandleRemove(item.getName())}> {\"X\"} </button>\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {renderProduct(item)}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <strong> \n                                    {`${item.getCurrency()} ${parseFloat(item.getPrice()).toFixed(2)}`}\n                                    </strong>\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <input data-testid={`qty-${idx}`} id={item.getName()} type=\"text\" className=\"inputQuantity\" onChange={handleQuantityChange}></input>\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {itemTotal[item.getName()]}\n                                </TableCell>\n                                </TableRow>\n                            ))}\n                            </TableBody>\n                            <TableBody>\n                                <TableRow key=\"total\">\n                                <TableCell colSpan={5} component=\"th\" scope=\"row\">\n                                    <Grid container justify=\"flex-end\">\n                                        <Typography variant=\"h6\">\n                                            {getMainTotal()}\n                                        </Typography>\n                                    </Grid>\n                                </TableCell>\n                                </TableRow>\n                            \n                            </TableBody>\n                        </Table>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cart;\n","import React, { useEffect, useState, Fragment } from 'react'\nimport axios, { AxiosResponse } from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport { Divider } from '@material-ui/core';\nimport { API_URL, PRODUCTS_PER_PAGE } from '../constants';\nimport { plainToClass } from 'class-transformer';\nimport { Product } from '../class/Product';\nimport ProductTile from './ProductTile';\nimport Cart from './Cart';\n\nimport './Main.scss';\n\nconst Main  = () => {\n    const [data, setData] = useState<Product[] | []>([]);\n    const [cartItems, setCartItems] = useState<Product[] | []>([]);\n\n    useEffect(() => {\n        async function getData (){\n            const response = await axios.get(API_URL).then((result: AxiosResponse) => {\n                const { data } = result.data;\n                return plainToClass(Product, data as Object[]);\n            });\n            setData(response);\n        }\n        getData();\n    }, []);\n    \n    const handleClick = (data: Product) => {\n       if (cartItems.filter(item => item.getName() === data.getName()).length === 0){\n            setCartItems([...cartItems, data]);\n       }\n    }\n\n    const handleRemove = (id: string) => {\n        const newCartItems = cartItems.filter(item => item.getName() !== id);\n        setCartItems(newCartItems);\n    }\n\n    const [mainProduct, ...restOfProducts] = data && data.slice(0, PRODUCTS_PER_PAGE);\n\n    return (\n        <div className=\"mainRoot\">\n            {data && data.length > 0 ? (\n                <Grid container>\n                    <Grid item  container xs={3} justify=\"space-around\">\n                        <ProductTile data={restOfProducts[0]} handleClick={handleClick} />\n                        <ProductTile data={restOfProducts[2]} handleClick={handleClick} />\n                    </Grid>\n                    <Grid item container xs={6} justify=\"center\"> \n                        <ProductTile data={mainProduct} handleClick={handleClick} />\n                    </Grid>\n                    <Grid item container xs={3} justify=\"space-around\">\n                        <ProductTile data={restOfProducts[1]} handleClick={handleClick} />\n                        <ProductTile data={restOfProducts[3]} handleClick={handleClick} />\n                    </Grid>\n                </Grid>\n            ) : '' }\n            <Divider className=\"divider\" />\n            <Cart cartItems={cartItems} handleRemove={handleRemove} />\n        </div>\n        \n    )\n}\n\nexport default Main\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n   <Fragment>\n     <Main />\n   </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}